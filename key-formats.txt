Jeremy Gautama

1.
id_rsa_homework.pub:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDdwBMP8kdGTqhvCehDBLdqQEcnJAguuJGW0NcAN7HlaoVNaelAOjId3PQ1btbjozVXhEa+jlhb1N/S+r0RoXrTw0jxS6Ge2pSxADhUy9ur77LCJZVt2Ig6DeO9PjJk62EN0bq/HjNM4Ew95sHm1Fa0ozOqhzIPaOhPlSQlMaNWxXkvMhh3MX5AamyQiUCN1NMWprWsIf16B2TKvLCi219ExBqNn5vGoH43TKW7E1YhxMxqbg1z7W2y5Y4lhWeFf9nlBbD5jjwYGRs9cvrOjgSClzoE+etwsOemIBczAbuJVmAKitc+iKIRP1k4l2UUE/GORN05bQTsXam8PZybGkplY+5rdWVx1wEdfFvrp8zqdoFc2w4RdMqXPejzjrhsHF3gVZ9PQtwpmIMWq76tGZDij9qmYPWSbBhbfdloCQUZAH/b7AacePGRV3joP4maeyZ3ElzLvNUWgjPtTp2bS73AGXEOLBOYXQTps8BK/Dswxut22h7u290IbJ8MJl8/rac= a@LeLaptop.local

id_rsa_homework:
-----BEGIN RSA PRIVATE KEY-----
MIIG4wIBAAKCAYEA3cATD/JHRk6obwnoQwS3akBHJyQILriRltDXADex5WqFTWnp
QDoyHdz0NW7W46M1V4RGvo5YW9Tf0vq9EaF608NI8UuhntqUsQA4VMvbq++ywiWV
bdiIOg3jvT4yZOthDdG6vx4zTOBMPebB5tRWtKMzqocyD2joT5UkJTGjVsV5LzIY
dzF+QGpskIlAjdTTFqa1rCH9egdkyrywottfRMQajZ+bxqB+N0yluxNWIcTMam4N
c+1tsuWOJYVnhX/Z5QWw+Y48GBkbPXL6zo4Egpc6BPnrcLDnpiAXMwG7iVZgCorX
PoiiET9ZOJdlFBPxjkTdOW0E7F2pvD2cmxpKZWPua3VlcdcBHXxb66fM6naBXNsO
EXTKlz3o8464bBxd4FWfT0LcKZiDFqu+rRmQ4o/apmD1kmwYW33ZaAkFGQB/2+wG
nHjxkVd46D+JmnsmdxJcy7zVFoIz7U6dm0u9wBlxDiwTmF0E6bPASvw7MMbrdtoe
7tvdCGyfDCZfP62nAgMBAAECggGAfMzg7ZSZcIRMX1HgGffJkk7ivLCWulS9+3dF
yaWOxWMR6uO0lqUqF4yHFJtw7WSpXLvhZNWP/P7tiTv8tLOBATVjFApQx6qVDJjn
GzIwS6/3lzS3yL6YzLOMfLFIg2vFj5V92JoSnS2POzdn4ZWXxsojBdJY5jtQo5l4
YkZxeyBgd6NmCY8dUvuSZjYY0rn4o0Ln9BydH9SRcViIwN9d2sHTf+lYLo2c+1pz
27miPBcaRLvzbk8t8gUn3w4ZmRS+bH6WJsmoZf0dcW4uedT3UkKmwE4xcTZ+/m0D
wT7EfwyCnXC6RP42IpdzzbWqaTxjinxWXRpQLfjqSuhnvv64m02MZcNc9Rit1f5D
NlwUd6E/HuhegBK0BiO2BjeZdhtwt9DEZoIduMMej+iMPeDdNe/eoxKovWabOa2w
utbHVzPbegS1gZ2X1aorkgin/FogmBNViW9Irarrgnu9agwUVoDflEfQMl+xLOrf
EZ8XOp6sbsnieFuKinBH7AEBczKhAoHBAPv+Rg2VcomCK7psgVkturhaxyVLxyUS
IKW3noT8P/EQxUevwR1V7i4jYOPGncIB3PWIB9jfTvJVBI/NLh6AVmzdny8gDs2G
RXzOkA+MaRvUjilsCgUBC4d2NWc7I5tdsFDgZhyq6YAAjrKuaueI33PO/90M4HdQ
oIrn4fiCj8Yi6i9L8U/il3DoEKsByqER1EKz3g4I9/TZ/ErrEm5B7sjiTV3WFglB
5iZSHn0Ps4gcX1HlTXlinK7wCPxMUKCyawKBwQDhRrLDGz8bVgfCPlyHl6OblMFB
UK4rTgq8eQC6qejF4QlTlmAwTDHlg3sHtVIH3oULHvDoZE7H2+POuKbZZR+SbRph
V7wjn7KO9zFM6WzVAZLOxQPSzvI49DtLYNOMG/Dq+zRtbtuEIsXd9RSmdpo7N96R
y0TilkIXinvcMSDbEzQhgUwym4+2waG8ARIIhwVJW7UmjoIeYkZd2RBeeS0JHSq0
a9Ye6uZDCLVKV2kUifXpACL7f4Fwe3yvUHuWmLUCgcA8y0yVTF/Uou3vzOur2yd4
AJaY/d4uqF/t+w2oYb7/Zp9huxoo/Kk4wlpGuY0n2BE5vza9cKp4NmCiXMrqmuW+
3/zefqpzlRhAkwkYZzSYfUBK6ADG0ki4xqD9pbviaMj3yht4gRdSRVAn9YJfF5tp
MiBycP/aaT5CJM1UihMrpxK+lGDEeBM3LxWOXCFJmKaP7Rr+YdWIYerHHE1XAlsc
ZdRqdhLc6uQejKNEYrxacxXgCSUWyt6oKcrRK4wsKL8CgcEAsMSKBwC9PxT9l5TZ
hGgfsDhEgJzvXfmqAQQt50rl5UfUyqsnpR5U1NSb2IuV56ja2sQXozL6gmbv1ckc
2183K+3CknmGnql0MiyTmddcV7QZX3hGrMdIWBqE4HwE418VZz1ggTJIu+GRQ75I
yuor0aXgVqSa0/W1vMUktb4zGtRxxoyvntJkLbK41047uUdBhbOZbLzMK01QC9oE
tyz8grdJSDOJ287UiesuXjxCryQmOwOpb5E4n2u2hdZwc9Y1AoHAZh3Z0y8iTD46
h6wd69Kny+0JefmI/Hqsn4YlX4l9bIVPHnU8qTI6KjhkYcXRxSsSaXs6+GfaDYSO
GUQF684KPAzu6xlYm4VTcu8ZJgt2RR5tzibW5FU3r6qpLET3uEZ1X9hDkMfTrb0U
XtfoLQmR7mvinz3xGIaaVV9glh5LQarrBQYFma50GQ5ZLreek5fuW3r/wkuqP+lX
kTg1SvzWnn/vJOhn9QwZ2Ukw+xPQm3cbo8hA0cjCKy+Kc+LMA7PW
-----END RSA PRIVATE KEY-----

id_rsa_homework.pub.pem:
-----BEGIN RSA PUBLIC KEY-----
MIIBigKCAYEA3cATD/JHRk6obwnoQwS3akBHJyQILriRltDXADex5WqFTWnpQDoy
Hdz0NW7W46M1V4RGvo5YW9Tf0vq9EaF608NI8UuhntqUsQA4VMvbq++ywiWVbdiI
Og3jvT4yZOthDdG6vx4zTOBMPebB5tRWtKMzqocyD2joT5UkJTGjVsV5LzIYdzF+
QGpskIlAjdTTFqa1rCH9egdkyrywottfRMQajZ+bxqB+N0yluxNWIcTMam4Nc+1t
suWOJYVnhX/Z5QWw+Y48GBkbPXL6zo4Egpc6BPnrcLDnpiAXMwG7iVZgCorXPoii
ET9ZOJdlFBPxjkTdOW0E7F2pvD2cmxpKZWPua3VlcdcBHXxb66fM6naBXNsOEXTK
lz3o8464bBxd4FWfT0LcKZiDFqu+rRmQ4o/apmD1kmwYW33ZaAkFGQB/2+wGnHjx
kVd46D+JmnsmdxJcy7zVFoIz7U6dm0u9wBlxDiwTmF0E6bPASvw7MMbrdtoe7tvd
CGyfDCZfP62nAgMBAAE=
-----END RSA PUBLIC KEY-----


2.
"Private Key"

3. 
RSAPrivateKey ::= SEQUENCE {
             version           Version,
             modulus           INTEGER,  -- n
             publicExponent    INTEGER,  -- e
             privateExponent   INTEGER,  -- d
             prime1            INTEGER,  -- p
             prime2            INTEGER,  -- q
             exponent1         INTEGER,  -- d mod (p-1)
             exponent2         INTEGER,  -- d mod (q-1)
             coefficient       INTEGER,  -- (inverse of q) mod p
             otherPrimeInfos   OtherPrimeInfos OPTIONAL
         }

4.
Lapo Luchini's ASN.1 decoder

    Steps: 
    1. Open https://lapo.it/asn1js/
    2. Copy the text from the private key file 
    3. Paste the text into the ASN.1 decoder
    4. Click on decode.

5.
RSAPrivateKey SEQUENCE (9 elem)
version Version INTEGER 0
modulus INTEGER (3072 bit) 5032350856635529843327927111428090363361774628438248583257444136889491336680781946183264098987385886821517034110364437567446291674897272937680690597399050379467227350485728295991305546161637202062226011390994953202081326664244742877741025899582991155287876458760217494199686273644796813475265584128273448481744241815835975104329968730345111783266695882661182151973589651912469364002206075993129651391346662016326796793842084648964780017370879373064105897001634797420560916201293598295658810409802181340212125086647941951091038410913671954000244078627797879776272624057805591060995040649903653884506491474248154396059368443556252274080115457371757222362389734200933606112583529269363702604968654662359700212224450104080104096719518789716159577551326258547395722898409796253499160098308349097572614126319016559834636992193718257493838726716886553070644392711816617660305759799918679379846649274318748256566818038120931087330727
publicExponent INTEGER 65537
privateExponent INTEGER (3071 bit) 2832189892673526141588831706942851899876950354689966900298572860293147358929062381601591666189339473114802848560762346693283016038831667836999169812387911778022631698053246295517697083550144598636848561944328514486558244238888003666670735604013290900890154192363273602027270526833921077684692552374799546421115623466672171532845668349940477943970715945741719066991071924579085402472761476828823322122136049587411654072418198120030165344167531543953743410668909130755406016761716689211331875392798946775415340790711435488447658757330133035276856224233897691437174304608484141232271931718718686983156520651866263565825340658837302353912083469140607672872173165733411731013048792813906088326404098170954566065464299679801030116285515092415264065340834522242647850332960132350085317400841953089103965007494785155375816600585351081932836626725743951922625020766894511109047356983148894103259648399029481050696478265401905964593825
prime1 INTEGER (1536 bit) 2372587802582860845663304368998029143417416984421266870398453670138672771813682456107063995772871262580557836439630914765724022235887924305485101750984317377162228227664553881516473965970553252899091505398937520004281671573391894133032464582393154644754692868433187926280836462954468926231315311871247065974024147419392112943811775376437477178093898514457431461318709257851303523830652195273680246580887626887368296009196113089003523307817862936842813067078185579
prime2 INTEGER (1536 bit) 2121038829904284974168981241172702856412644528220937536480346016684041547338752357802178243246593815693615839849729087823211054756332578040723953926584025492236804104092002749115036496244298465195301636085512494965865987235203543413782865256734796575544726132997578772787276314098132766796448643547799505404654589202844277525457128802738831380415619863654148382254459878727985614067794409535851872455855380406034143300461216274262575206743348304357664313656645813
exponent1 INTEGER (1534 bit) 572394002573166498783626125367774521057918121682174199122174511780559915698706582747284569589161352101274088712437316223825663603332834447625386328101882021610876154044345353321894042692836374591261970976129531848996711922225601387573070136140167662361970321235288986411131197884753775617488234066196001649683320793567125406329370897002501665667373077987800003584389155376153318206302422440333832471587260154053132248979961610239020812974475958533678950876195007
exponent2 INTEGER (1536 bit) 1664318199304634859646304535259567029174668429494204995857329354532200689257905305399652351480172833239913248459226365889629194055944013698280808256016960052157981766832953009341909941244839534502164985209842990274496214254090700215966306755383781892631453093510543485215766428925591307696528243502839458099003040263610891126335243430136326101864187428298740872445116487840252989966527724955081595755716052571529148713340831086316934403570146429522146075191006773
coefficient INTEGER (1535 bit) 961456726616822869504164327156954074802057821770777978717170767937240194183291307289608493000244801178094308277305242694604342332167506851282445981700945996818727312399637612992415219300175819605569823328067928861384105400393074197409697786921367540908659482208625374795118999957513069824916239310697565124106742212597996570785704071600655054352070634107807748764561296497562820106967837001443390227832128127220675420678083842311969793705421888905404161812837334

6. 
"Public Key"

7.
RSAPublicKey ::= SEQUENCE {
    modulus           INTEGER,  -- n
    publicExponent    INTEGER   -- e
}

    Steps:
    1. Open http://ldh.org/asn1.html
    2. Copy the text from the public key file
    3. Paste the text into the decoder
    4. Click covert.

U.P.SEQUENCE {
   U.P.INTEGER 0x00ddc0130ff247464ea86f09e84304b76a40472724082eb89196d0d70037b1e56a854d69e9403a321ddcf4356ed6e3a335578446be8e585bd4dfd2fabd11a17ad3c348f14ba19eda94b1003854cbdbabefb2c225956dd8883a0de3bd3e3264eb610dd1babf1e334ce04c3de6c1e6d456b4a333aa87320f68e84f95242531a356c5792f321877317e406a6c9089408dd4d316a6b5ac21fd7a0764cabcb0a2db5f44c41a8d9f9bc6a07e374ca5bb135621c4cc6a6e0d73ed6db2e58e258567857fd9e505b0f98e3c18191b3d72face8e0482973a04f9eb70b0e7a620173301bb8956600a8ad73e88a2113f593897651413f18e44dd396d04ec5da9bc3d9c9b1a4a6563ee6b756571d7011d7c5beba7ccea76815cdb0e1174ca973de8f38eb86c1c5de0559f4f42dc29988316abbead1990e28fdaa660f5926c185b7dd968090519007fdbec069c78f1915778e83f899a7b2677125ccbbcd5168233ed4e9d9b4bbdc019710e2c13985d04e9b3c04afc3b30c6eb76da1eeedbdd086c9f0c265f3fada7
   U.P.INTEGER 0x010001 (65537 decimal)
}

8.
"Sanity check"

9.
The easiest way to do this is to see if n (modulus) and e (publicExponent) are the same.

Private key n: modulus INTEGER (3072 bit) 5032350856635529843327927111428090363361774628438248583257444136889491336680781946183264098987385886821517034110364437567446291674897272937680690597399050379467227350485728295991305546161637202062226011390994953202081326664244742877741025899582991155287876458760217494199686273644796813475265584128273448481744241815835975104329968730345111783266695882661182151973589651912469364002206075993129651391346662016326796793842084648964780017370879373064105897001634797420560916201293598295658810409802181340212125086647941951091038410913671954000244078627797879776272624057805591060995040649903653884506491474248154396059368443556252274080115457371757222362389734200933606112583529269363702604968654662359700212224450104080104096719518789716159577551326258547395722898409796253499160098308349097572614126319016559834636992193718257493838726716886553070644392711816617660305759799918679379846649274318748256566818038120931087330727
Public key n: U.P.INTEGER 0x00ddc0130ff247464ea86f09e84304b76a40472724082eb89196d0d70037b1e56a854d69e9403a321ddcf4356ed6e3a335578446be8e585bd4dfd2fabd11a17ad3c348f14ba19eda94b1003854cbdbabefb2c225956dd8883a0de3bd3e3264eb610dd1babf1e334ce04c3de6c1e6d456b4a333aa87320f68e84f95242531a356c5792f321877317e406a6c9089408dd4d316a6b5ac21fd7a0764cabcb0a2db5f44c41a8d9f9bc6a07e374ca5bb135621c4cc6a6e0d73ed6db2e58e258567857fd9e505b0f98e3c18191b3d72face8e0482973a04f9eb70b0e7a620173301bb8956600a8ad73e88a2113f593897651413f18e44dd396d04ec5da9bc3d9c9b1a4a6563ee6b756571d7011d7c5beba7ccea76815cdb0e1174ca973de8f38eb86c1c5de0559f4f42dc29988316abbead1990e28fdaa660f5926c185b7dd968090519007fdbec069c78f1915778e83f899a7b2677125ccbbcd5168233ed4e9d9b4bbdc019710e2c13985d04e9b3c04afc3b30c6eb76da1eeedbdd086c9f0c265f3fada7
Note: The hexadecimal and decimal is equivalent to each other.

Private key e: INTEGER 65537
Public key e: 0x010001 (65537 decimal)

Some python code to answer if e*d mod lambda(n) = 1...
```
e = 65537
d = 2832189892673526141588831706942851899876950354689966900298572860293147358929062381601591666189339473114802848560762346693283016038831667836999169812387911778022631698053246295517697083550144598636848561944328514486558244238888003666670735604013290900890154192363273602027270526833921077684692552374799546421115623466672171532845668349940477943970715945741719066991071924579085402472761476828823322122136049587411654072418198120030165344167531543953743410668909130755406016761716689211331875392798946775415340790711435488447658757330133035276856224233897691437174304608484141232271931718718686983156520651866263565825340658837302353912083469140607672872173165733411731013048792813906088326404098170954566065464299679801030116285515092415264065340834522242647850332960132350085317400841953089103965007494785155375816600585351081932836626725743951922625020766894511109047356983148894103259648399029481050696478265401905964593825
p = 2372587802582860845663304368998029143417416984421266870398453670138672771813682456107063995772871262580557836439630914765724022235887924305485101750984317377162228227664553881516473965970553252899091505398937520004281671573391894133032464582393154644754692868433187926280836462954468926231315311871247065974024147419392112943811775376437477178093898514457431461318709257851303523830652195273680246580887626887368296009196113089003523307817862936842813067078185579
q = 2121038829904284974168981241172702856412644528220937536480346016684041547338752357802178243246593815693615839849729087823211054756332578040723953926584025492236804104092002749115036496244298465195301636085512494965865987235203543413782865256734796575544726132997578772787276314098132766796448643547799505404654589202844277525457128802738831380415619863654148382254459878727985614067794409535851872455855380406034143300461216274262575206743348304357664313656645813

lambda_n = (p - 1) * (q - 1)

if e*d % lambda_n == 1:
    print("TRUE!")
```
And it prints out TRUE!